
.. _EDH-net:


***************************
Epigraphic Networks using R
***************************

.. ---
.. layout: post
.. title:  "Epigraphic Networks: Measures of similarity of artefact assemblages and geographic proximity"
.. date:   10-03-2020 12:00:00
.. author: jaro
.. categories: Short-reports
.. ---

.. <!--- # Short report: Epigraphic Networks using R
.. <span class="smallcaps">Antonio Rivero Ostoic  
.. 18-10-2019</span>
.. Short report:  [R]{.sans-serif}  --->

This post is about Epigraphic Networks based on measures of similarity of artefact assemblages and geographic proximity. 


|



Measuring similarity of artefact assemblages and geographic proximity
=====================================================================

.. function [`simil() <https://github.com/mplex/cedhar/blob/master/code/simil.r>`_] 

To measure similarity of artefact assemblages and geographic proximity, [R] package 
``sdam`` provides the function ``simil()``, which allows assesing similarity by comparing 
columns representing --in this case-- different attributes for epigraphic inscriptions. 




|


Function usage
--------------

.. function:: simil

.. code-block:: R

    # arguments supported (currently)
    R> simil(x, att, null, uniq, diag.incl)


Which returns a square and valued matrix with similarity meassures based on simple match among variables. 

| 

Parameters
----------


Formal arguments of ``simil()`` are:


- `x:`

   a data frame with an `id` column

- `att:`

   (vector) column(s) in ``x`` representing attributes 


|

Optional parameters
-------------------


- `null:`

   include in computation ``NA`` or ``NULLs``?

- `uniq:`

   remove duplicates from ``x``?

- `diag.incl:`

   include entries in the matrix diagonal?


..     # FUNCTION simil() to compute similarity of entries in a given data frame
..     # (CC BY-SA 4.0) Antonio Rivero Ostoic, jaro@cas.au.dk 
..     #
..     # version 0.1 (10-03-2020)
..     #
..     # INPUT AND ARGUMENTS
..     # x  a data frame with an ID column
..     # att (vector) column(s) in x representing attributes
..     # null (optional) include NA or NULLs?
..     # uniq (optional) remove duplicates?
..     # diag.incl (optional) include entries in matrix diagonal?


|

At this point, the ID column represents the labels of the nodes. In 
case that an ID column does not exists, then the first column is taken 
as *id* provided that there are not duplicated entry names in ``x``. 



|


EDH dataset
===========


We illustrate the use of the ``simil()`` function with ancient inscriptions from 
the Epigraphic Database Heidelberg, and we first follow the entry :ref:`Epigraphic Database Heidelberg <EDH>` 
to see how accessing the ``EDH`` dataset using ``sdam`` [R] package.

|

.. code-block:: R

    # devtools::install_github("mplex/cedhar", subdir="pkg/sdam")
    # devtools::install_github("sdam-au/sdam")
    R> library("sdam")

    # load the EDH data from this package
    R> data("EDH")



|

Epigraphic network data
-----------------------

Creating epigraphic network data list with variables measures of similarity of artefact assemblages and geographic proximity. 
For example, a list object named ``epinet`` with the ``ID`` of the inscription plus seven other characteristics from
the ``EDH`` dataset is produced by ``edhw()``. 


..  See :ref:`"Relative Dating" in Epigraphic Database Heidelberg <recursively-apply>` for another use of functional programming with ``lapply()``. 


.. code-block:: R

    # choose variables of interest and record it as a data frame
    R> epinet <- edhw(c("type_of_monument", "language", "material", "country", "findspot_ancient", 
                        "not_after", "not_before"), as="df")

..  .. code-block:: R
..  
..      # choose variables of interest
..      R> EDH1 <- lapply(EDH, `[`, c("ID", "type_of_monument", "language", "material", 
..                       "country", "findspot_ancient", "not_after", "not_before") )
..  
..  
..  
..  |
..  
..  Data frame
..  ^^^^^^^^^^
..  
..  Now we execute a function call on the list to convert list of data into a data frame object named ``epinet``.
..  
..  .. code-block:: R
..  
..      # make a data frame from this variable
..      R> epinet <- as.data.frame(do.call(rbind, EDH1))



|


Take a look at this data:

.. code-block:: R

    # first eight entries in the data frame
    R> head(epinet, 8)
    #        id country findspot_ancient language                                material not_after not_before   type_of_inscription
    #1 HD000001   Italy       Cumae, bei    Latin                Marmor, geädert / farbig      0130       0071               epitaph
    #2 HD000002   Italy             Roma    Latin       marble: rocks - metamorphic rocks      0200       0051               epitaph
    #3 HD000003   Spain             <NA>    Latin       marble: rocks - metamorphic rocks      0170       0131 honorific inscription
    #4 HD000004   Spain    Ipolcobulcula    Latin    limestone: rocks - clastic sediments      0200       0151    votive inscription
    #5 HD000005   Italy             Roma    Latin                                    <NA>      0200       0001               epitaph
    #6 HD000006   Spain      Sabora, bei    Latin    limestone: rocks - clastic sediments      0150       0071               epitaph
    #7 HD000007   Italy             Roma    Latin travertine: rocks - chemische Sedimente     -0051      -0100               epitaph
    #8 HD000008   Italy            Roma?    Latin       marble: rocks - metamorphic rocks      0200       0101               epitaph


For instance, entry ``8`` indicates that this ancient findspot is uncertain. 


|

Regular expressions
+++++++++++++++++++

To remove question marks, for example, we use a regular expression

.. code-block:: R

    R> epinet2 <- as.data.frame(sapply(epinet, function (x)  as.list(gsub('\\?', '', x)) ))

..  .. code-block:: R
..  
..      # a new data frame for the same variables but now without question marks
..      R> epinet2 <- as.data.frame(do.call(rbind, lapply(EDH1, function (x)  as.list(gsub('\\?', '', x)) )) )
..      R> colnames(epinet2) <- names(EDH1[[1]])


|

    ..  todo::
        Make another function for cleaning? After all, ``sapply()`` converts ``<NA>`` into ``NA``.


|

And then we take a look at ``epinet2`` again, and we assume the questioned entries. 

.. code-block:: R

    # first eight entries in the new data frame
    R> head(epinet2, 8)
    #        id country findspot_ancient language                                material not_after not_before   type_of_inscription
    #1 HD000001   Italy       Cumae, bei    Latin                Marmor, geädert / farbig      0130       0071               epitaph
    #2 HD000002   Italy             Roma    Latin       marble: rocks - metamorphic rocks      0200       0051               epitaph
    #3 HD000003   Spain               NA    Latin       marble: rocks - metamorphic rocks      0170       0131 honorific inscription
    #4 HD000004   Spain    Ipolcobulcula    Latin    limestone: rocks - clastic sediments      0200       0151    votive inscription
    #5 HD000005   Italy             Roma    Latin                                      NA      0200       0001               epitaph
    #6 HD000006   Spain      Sabora, bei    Latin    limestone: rocks - clastic sediments      0150       0071               epitaph
    #7 HD000007   Italy             Roma    Latin travertine: rocks - chemische Sedimente     -0051      -0100               epitaph
    #8 HD000008   Italy             Roma    Latin       marble: rocks - metamorphic rocks      0200       0101               epitaph


|


The countries in ``epinet2`` are:

.. code-block:: R

    # need first to unlist the component object
    R> unique(unlist(epinet2$country))
    # [1] "Italy"                  "Spain"                  "United Kingdom"         "Portugal"
    # [5] "France"                 "Libyan Arab Jamahiriya" "Germany"                "Hungary"
    # [9] "Austria"                "Bulgaria"               "Bosnia and Herzegovina" "Montenegro"
    #[13] "Netherlands"            "Tunisia"                "Romania"                "Algeria"
    #[17] "Jordan"                 "NULL"                   "Croatia"                "Switzerland"
    #[21] "Belgium"                "Albania"                "Serbia"                 "Egypt"
    #[25] "Syrian Arab Republic"   "Morocco"                "Turkey"                 "Lebanon"
    #[29] "Kosovo"                 "Macedonia"              "Slovakia"               "Greece"
    #[33] "Slovenia"               "Iraq"                   "Israel"                 "unknown"
    #[37] "Vatican City State"     "Ukraine"                "Cyprus"                 "Yemen"
    #[41] "Sudan"                  "Luxembourg"             "Czech Republic"         "Malta"
    #[45] "Poland"                 "Armenia"                "Monaco"                 "Azerbaijan"
    #[49] "Sweden"                 "Denmark"                "Moldova"                "Saudi Arabia"
    #[53] "Uzbekistan"             "Liechtenstein"          "Georgia"



|


Subsetting the data
+++++++++++++++++++

For example, we use the ``base`` [R] function ``subset()`` to substract epigraphic material in "Greek-Latin" from Egypt.


.. code-block:: R

    # a subset of a subset
    R> subset(subset(epinet2, country=="Egypt"), language=="Greek-Latin")
    #            id country findspot_ancient    language    material not_after not_before     type_of_monument
    #2003  HD002009   Egypt           Philae Greek-Latin          NA        NA      -0116 architectural member
    #23091 HD023319   Egypt               NA Greek-Latin Holz, Wachs        NA       0145              diptych
    #23138 HD023368   Egypt            Syene Greek-Latin          NA        NA      -0029                   NA
    #27345 HD024001   Egypt               NA Greek-Latin Holz, Wachs        NA       0145              diptych
    #27351 HD024009   Egypt            Syene Greek-Latin          NA        NA      -0029                   NA
    #32500 HD030457   Egypt       Alexandria Greek-Latin          NA      0011       0010                   NA
    #34436 HD032412   Egypt          Schedia Greek-Latin          NA        NA         NA                   NA
    #51198 HD049264   Egypt         Berenice Greek-Latin          NA        NA       0006                cliff
    #54194 HD052276   Egypt       Alexandria Greek-Latin          NA      0225       0155                stele
    #58318 HD056791   Egypt         Berenice Greek-Latin          NA      0200       0001                stele
    #70110 HD068637   Egypt      Leontopolis Greek-Latin          NA     -0030      -0037                   NA



|


Ranked frequency
++++++++++++++++

A ranked frequency of different *kinds of inscriptions* including missing information is computed as follows: 


.. code-block:: R

    R> as.data.frame(sort(table(unlist(epinet2$type_of_inscription), useNA="ifany"), decreasing=TRUE))
    #                              Var1  Freq
    #1                          epitaph 27898
    #2                             <NA> 21883
    #3               votive inscription 14213
    #4         owner/artist inscription  4876
    #5            honorific inscription  4314
    #6  building/dedicatory inscription  3378
    #7                mile-/leaguestone  1713
    #8       identification inscription  1353
    #9                 military diploma   507
    #10                     acclamation   495
    #11                            list   356
    #12                         defixio   309
    #13                           label   266
    #14        public legal inscription   254
    #15            boundary inscription   252
    #16                         elogium   154
    #17                seat inscription    86
    #18                          prayer    56
    #19                          letter    39
    #20       private legal inscription    34
    #21         assignation inscription    13
    #22                        calendar    12
    #23                     adnuntiatio     3


That is, a decreasing sorted table given as data frame of the ``type_of_inscription`` 
component of ``epinet2``. Since ``epinet2`` is a list object, it is required to *unlist* the 
data object to produce a table with the frequencies. 



|


Example: Similarity among Egyptian epigraphs
============================================


We can compute similarity among Egyptian epigraphs with function ``simil()``. 
For this, we look at the attribute types stored in different columns.



.. code-block:: R

    R> as.data.frame(colnames(epinet2))
    #    colnames(epinet2)
    #1                  id
    #2             country
    #3    findspot_ancient
    #4            language
    #5            material
    #6           not_after
    #7          not_before
    #8 type_of_inscription


|


For instance, in case we want to choose ``"type_of_inscription"``, ``"material"``, and ``"findspot_ancient"``, 
these correspond to columns 8, 5, and 3. 

Similarities among Egyptian epigraphs `by simple matching` with the above attribute variables are recorded in 
a matrix object named ``epEgs`` where the ``ID`` in ``epinet2`` corresponds to the dimensions labels.


.. code-block:: R

    # similarity function on the subset for the three variables
    R> epEgs <- simil(subset(epinet2, country=="Egypt"), c(8,5,6))

    # number of rows in this square matrix
    R> nrow(epEgs)
    #[1] 175


|


And then we look at some cell entries

.. code-block:: R

    # similarity between the first six inscriptions in 'epEgs'
    R> epEgs[1:6, 1:6]
    #         HD000744 HD002009 HD003137 HD006817 HD006820 HD008184
    #HD000744        0        1        1        0        0        0
    #HD002009        1        0        0        0        0        0
    #HD003137        1        0        0        0        0        0
    #HD006817        0        0        0        0        1        0
    #HD006820        0        0        0        1        0        0
    #HD008184        0        0        0        0        0        0

where we observe six records of a single similarity. 


|



Plot similarities
-----------------


To produce a graph for the similarity among Egyptian epigraphs, we employ the [R] package ``multigraph`` that 
depends on ``multiplex``. 



.. code-block:: R

    # define scope for the graph
    R> scp <- list(directed=FALSE, valued=TRUE, ecol=8, pos=0)

    # load "multigraph" where "multiplex" gets invoked
    R> library(multigraph)

    # plot similarity graph of 'epEgs' for the chosen variables
    R> multigraph(epEgs, scope=scp, layout="force", maxiter=70, main="Similarity among Egyptian epigraphs")




|

.. index:: graph 



.. image:: ../images/epEgs.png
   :width: 450








.. meta::
   :description: Compute similarity in Epigraphic Networks
   :keywords: epigraphic, documentation, dataset, networks

